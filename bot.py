from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import json
import os

# üîë –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8126131226:AAH52Ad8CwWfuPIdH0YnRNPhGVwsUucpAFY"

# üåê URL —Ç–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ Render (–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!)
WEB_APP_URL = "https://dorlowpegas.onrender.com"

# üì© ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!)
ADMIN_ID = 494863358

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    web_app = types.WebAppInfo(url=WEB_APP_URL)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõí", web_app=web_app))
    await message.answer(
        "üçì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –¥–µ—Å–µ—Ä—Ç–æ–≤!\n\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –≤—Å—ë –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ Telegram!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App (–ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞)
@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def web_app_data_handler(message: types.Message):
    data = message.web_app_data.data  # JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
    user = message.from_user

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ñ–∞–π–ª orders.json
    if not os.path.exists('orders.json'):
        with open('orders.json', 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=2)

    with open('orders.json', 'r+', encoding='utf-8') as f:
        orders = json.load(f)
        orders.append({
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "data": data
        })
        f.seek(0)
        json.dump(orders, f, ensure_ascii=False, indent=2)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({user.first_name})\n"
            f"üÜî ID: {user.id}\n"
            f"üìã –î–∞–Ω–Ω—ã–µ: {data}",
            parse_mode="Markdown"
        )
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã!")
    executor.start_polling(dp, skip_updates=True)
