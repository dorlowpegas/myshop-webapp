from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.markdown import hbold
import json
import os

# üîë –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8126131226:AAH52Ad8CwWfuPIdH0YnRNPhGVwsUucpAFY"

# üåê URL —Ç–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ Render
WEB_APP_URL = "https://dorlowpegas.onrender.com"

# üì© ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 494863358

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App
@router.message(Command("start"))
async def send_welcome(message: Message):
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõí", web_app=web_app)]
    ])
    await message.answer(
        f"üçì {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –¥–µ—Å–µ—Ä—Ç–æ–≤!')}\n\n"
        "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –≤—Å—ë –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ Telegram!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@router.message(F.web_app_data)
async def web_app_data_handler(message: Message):
    data = message.web_app_data.data
    user = message.from_user

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    if not os.path.exists('orders.json'):
        with open('orders.json', 'w', encoding='utf-8') as f:
            json.dump([], f, ensure_ascii=False, indent=2)

    with open('orders.json', 'r+', encoding='utf-8') as f:
        orders = json.load(f)
        orders.append({
            "user_id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "data": data
        })
        f.seek(0)
        json.dump(orders, f, ensure_ascii=False, indent=2)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'} ({user.first_name})\n"
            f"üÜî ID: {user.id}\n"
            f"üìã –î–∞–Ω–Ω—ã–µ: {data}",
            parse_mode="Markdown"
        )
        print(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É (ID: {ADMIN_ID})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("test"))
async def test_admin_message(message: Message):
    try:
        await bot.send_message(ADMIN_ID, "‚úÖ –¢–µ—Å—Ç: –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É!")
        await message.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())